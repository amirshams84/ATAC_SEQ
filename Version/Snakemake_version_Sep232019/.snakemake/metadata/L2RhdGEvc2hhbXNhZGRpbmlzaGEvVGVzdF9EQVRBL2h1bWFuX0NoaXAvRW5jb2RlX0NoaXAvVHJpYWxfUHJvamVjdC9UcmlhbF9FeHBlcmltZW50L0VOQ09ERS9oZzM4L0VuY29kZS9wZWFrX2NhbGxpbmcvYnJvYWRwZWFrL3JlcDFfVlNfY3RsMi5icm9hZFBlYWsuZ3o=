{"version": null, "code": "", "rule": "Peak_Calling_Broad_Controlled", "input": ["/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/post_alignment/ctl2.processed.bam", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/post_alignment/ctl2.processed.bam.bai", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/post_alignment/ctl2.processed.bed.gz", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/post_alignment/ctl2.processed.bed.gz.tbi", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/post_alignment/rep1.processed.bam", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/post_alignment/rep1.processed.bam.bai", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/post_alignment/rep1.processed.bed.gz", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/post_alignment/rep1.processed.bed.gz.tbi"], "log": [], "params": [], "shellcmd": null, "incomplete": false, "starttime": 1559578125.493047, "endtime": 1559578133.45731, "job_hash": 4836320479714523357, "conda_env": null, "singularity_img_url": null}