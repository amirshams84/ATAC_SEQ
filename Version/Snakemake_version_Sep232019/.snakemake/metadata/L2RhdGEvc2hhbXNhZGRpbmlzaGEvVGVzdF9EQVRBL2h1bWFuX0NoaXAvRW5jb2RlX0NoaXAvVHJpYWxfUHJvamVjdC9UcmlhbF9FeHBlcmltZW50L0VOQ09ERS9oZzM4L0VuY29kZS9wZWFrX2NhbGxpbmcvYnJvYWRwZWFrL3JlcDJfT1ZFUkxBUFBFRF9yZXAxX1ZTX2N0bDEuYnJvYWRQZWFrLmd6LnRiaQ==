{"version": null, "code": "", "rule": "BroadPeak_Controlled_Overlap", "input": ["/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/peak_calling/broadpeak/rep1_VS_ctl1.broadPeak.gz", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/peak_calling/broadpeak/rep2_POOLED_rep1_VS_ctl1.broadPeak.gz", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/peak_calling/broadpeak/rep2_VS_ctl1.broadPeak.gz"], "log": [], "params": [], "shellcmd": null, "incomplete": false, "starttime": 1559578498.567906, "endtime": 1559578507.8978667, "job_hash": -8667563442519005646, "conda_env": null, "singularity_img_url": null}