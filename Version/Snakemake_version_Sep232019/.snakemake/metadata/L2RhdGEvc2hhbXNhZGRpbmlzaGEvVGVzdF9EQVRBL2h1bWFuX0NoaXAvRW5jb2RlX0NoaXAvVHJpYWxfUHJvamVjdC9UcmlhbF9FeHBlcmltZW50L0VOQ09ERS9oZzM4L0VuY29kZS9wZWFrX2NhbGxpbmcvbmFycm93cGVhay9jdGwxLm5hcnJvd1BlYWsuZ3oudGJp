{"version": null, "code": "gAMoQwx0AGQBgwEBAGQAUwBxAChYBQAAAGlucHV0cQFYBgAAAG91dHB1dHECWAYAAABwYXJhbXNxA1gJAAAAd2lsZGNhcmRzcQRYBwAAAHRocmVhZHNxBVgJAAAAcmVzb3VyY2VzcQZYAwAAAGxvZ3EHWAcAAAB2ZXJzaW9ucQhYBAAAAHJ1bGVxCVgJAAAAY29uZGFfZW52cQpYDwAAAHNpbmd1bGFyaXR5X2ltZ3ELWBAAAABzaW5ndWxhcml0eV9hcmdzcQxYDwAAAHVzZV9zaW5ndWxhcml0eXENWAwAAABiZW5jaF9yZWNvcmRxDlgFAAAAam9iaWRxD1gIAAAAaXNfc2hlbGxxEFgPAAAAYmVuY2hfaXRlcmF0aW9ucRFYCgAAAHNoYWRvd19kaXJxEnRxE11xFChOWFooAAAKCQkJIwoJCQltb2R1bGUgbG9hZCBzYW10b29scy8xLjkgfHwgZXhpdCAxCgkJCW1vZHVsZSBsb2FkIG1hY3MvMi4xLjIgfHwgZXhpdCAxCgkJCW1vZHVsZSBsb2FkIGJlZHRvb2xzLzIuMjcuMSB8fCBleGl0IDEKCQkJbW9kdWxlIGxvYWQgZGVlcHRvb2xzLzMuMS4zIHx8IGV4aXQgMQoJCQltb2R1bGUgbG9hZCB1Y3NjLzM3MyB8fCBleGl0IDEKCQkJIwoJCQlRQ19QQVRIPXtXT1JLRElSfS97UFJPSkVDVH0ve0VYUEVSSU1FTlR9L3tUSVRMRX0ve0dFTk9NRX0ve3dpbGRjYXJkcy5kZXNpZ259L3JlcG9ydC9wZWFrX2NhbGxpbmcKCQkJbWtkaXIgLXAgJFFDX1BBVEgKCQkJT1VUX1BBVEg9e1dPUktESVJ9L3tQUk9KRUNUfS97RVhQRVJJTUVOVH0ve1RJVExFfS97R0VOT01FfS97d2lsZGNhcmRzLmRlc2lnbn0vcGVha19jYWxsaW5nL25hcnJvd3BlYWsKCQkJbWtkaXIgLXAgJE9VVF9QQVRICgkJCSMKCQkJaWYgWyAhIC1mIC4vU2NyaXB0L2JpZ05hcnJvd1BlYWsuYXMgXTsgdGhlbgoJCQkJd2dldCB7Y29uZmlnX3V0aWxpdGllc19EaWN0W0JpZ05hcnJvd1BlYWtdfSAtTyAuL1NjcmlwdC9iaWdOYXJyb3dQZWFrLmFzCgkJCWZpCgkJCSMKCQkJQVdLX0NPTU1BTkRfMT0nQkVHSU57e09GUz0iXHQifX17e2lmICgkNT4xMDAwKSAkNT0xMDAwOyBwcmludCAkMH19JwoJCQkjCgkJCXNhbXBsZV9OYW1lPSQoYmFzZW5hbWUge2lucHV0LnByb2Nlc3NlZF9iZWR9KQoJCQlzYW1wbGVfTmFtZT0ke3tzYW1wbGVfTmFtZSUucHJvY2Vzc2VkLmJlZC5nen19CgkJCSMKCQkJcHJpbnRmICIlc1xuIiAiIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMtIENPTU1BTkRMSU5FIC0jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgIm1vZHVsZSBsb2FkIHNhbXRvb2xzLzEuOSB8fCBleGl0IDEiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAibW9kdWxlIGxvYWQgbWFjcy8yLjEuMiB8fCBleGl0IDEiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAibW9kdWxlIGxvYWQgYmVkdG9vbHMvMi4yNy4xIHx8IGV4aXQgMSIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIiVzXG4iICJtb2R1bGUgbG9hZCBkZWVwdG9vbHMvMy4xLjMgfHwgZXhpdCAxIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgIm1vZHVsZSBsb2FkIHVjc2MvMzczIHx8IGV4aXQgMSIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIiVzXG4iICIjIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgIkRlc2NyaXB0aW9uOiIgIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiUGVhayBDYWxsaW5nIE5hcnJvdyIgIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiIyIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIklOUFVUMTogJXNcbiIgIntpbnB1dC5wcm9jZXNzZWRfYmFtfSIgIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICJJTlBVVDI6ICVzXG4iICJ7aW5wdXQucHJvY2Vzc2VkX2JhbV9pbmRleH0iICB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiSU5QVVQzOiAlc1xuIiAie2lucHV0LnByb2Nlc3NlZF9iZWR9IiAgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIklOUFVUNDogJXNcbiIgIntpbnB1dC5wcm9jZXNzZWRfYmVkX2luZGV4fSIgIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiIyIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIk9VVFBVVDE6ICVzXG4iICJ7b3V0cHV0Lm5hcnJvd1BlYWtfYmVkfSIgIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICJPVVRQVVQyOiAlc1xuIiAie291dHB1dC5uYXJyb3dQZWFrX2JlZF9pbmRleH0iICB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiT1VUUFVUMzogJXNcbiIgIntvdXRwdXQubmFycm93UGVha19iaWdiZWR9IiAgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIk9VVFBVVDQ6ICVzXG4iICJ7b3V0cHV0Lm5hcnJvd1BlYWtfYmRnfSIgIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICJPVVRQVVQ1OiAlc1xuIiAie291dHB1dC5uYXJyb3dQZWFrX2JpZ3dpZ30iICB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgIisrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKyIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIiVzXG4iICJtYWNzMiBjYWxscGVhayAtLXRyZWF0bWVudCB7aW5wdXQucHJvY2Vzc2VkX2JlZH0gLS1uYW1lICR7e3NhbXBsZV9OYW1lfX0ubWFjczJfbmFycm93IHtNQUNTMl9OQVJST1dfUEFSQU1FVEVSU30gLS1vdXRkaXIgJE9VVF9QQVRIIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgIiMiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiTENfQ09MTEFURT1DIHNvcnQgLWsxLDEgLWsyLDJuICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvd19wZWFrcy5uYXJyb3dQZWFrID4ge291dHB1dC5uYXJyb3dQZWFrX2JlZH0uc29ydGVkIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgIiMiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiYmd6aXAgLWMge291dHB1dC5uYXJyb3dQZWFrX2JlZH0uc29ydGVkID4ge291dHB1dC5uYXJyb3dQZWFrX2JlZH0iIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiIyIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIiVzXG4iICJ0YWJpeCAtZiAtcCBiZWQge291dHB1dC5uYXJyb3dQZWFrX2JlZH0iIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiIyIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIiVzXG4iICJhd2sgJyRBV0tfQ09NTUFORF8xJyB7b3V0cHV0Lm5hcnJvd1BlYWtfYmVkfS5zb3J0ZWQgPiB7b3V0cHV0Lm5hcnJvd1BlYWtfYmVkfS50bXAiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiIyIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIiVzXG4iICJiZWRUb0JpZ0JlZCAtYXM9Li9TY3JpcHQvYmlnTmFycm93UGVhay5hcyAtdHlwZT1iZWQ2KzQge291dHB1dC5uYXJyb3dQZWFrX2JlZH0udG1wIHtjb25maWdfcmVmZXJlbmNlX0RpY3RbQ0hST01fU0laRV19IHtvdXRwdXQubmFycm93UGVha19iaWdiZWR9IiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgIiMiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAibWFjczIgYmRnY21wIC10ICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvd190cmVhdF9waWxldXAuYmRnIC1jICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvd19jb250cm9sX2xhbWJkYS5iZGcgLS1vLXByZWZpeCAke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvdyAtLW91dGRpciAkT1VUX1BBVEggLS1tZXRob2QgRkUgLS1wc2V1ZG9jb3VudCAwLjAwMDAxIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgIiMiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAic2xvcEJlZCAtaSAkT1VUX1BBVEgvJHt7c2FtcGxlX05hbWV9fS5tYWNzMl9uYXJyb3dfRkUuYmRnIC1nIHtjb25maWdfcmVmZXJlbmNlX0RpY3RbQ0hST01fU0laRV19IC1iIDAgfCBiZWRDbGlwIHN0ZGluIHtjb25maWdfcmVmZXJlbmNlX0RpY3RbQ0hST01fU0laRV19IHtvdXRwdXQubmFycm93UGVha19iZGd9LnRtcCIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIiVzXG4iICIjIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgIkxDX0NPTExBVEU9QyBzb3J0IC1rMSwxIC1rMiwybiB7b3V0cHV0Lm5hcnJvd1BlYWtfYmRnfS50bXAgPiB7b3V0cHV0Lm5hcnJvd1BlYWtfYmRnfSIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIiVzXG4iICIjIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgImN1dCAtZjEsMiwzIHtvdXRwdXQubmFycm93UGVha19iZGd9IHwgc29ydCB8IHVuaXEgLWQgPiAkT1VUX1BBVEgvJHt7c2FtcGxlX05hbWV9fS5uYXJyb3cuZHVwbGljYXRlLnR4dCIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIiVzXG4iICIjIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgImN1dCAtZjEsMiB7b3V0cHV0Lm5hcnJvd1BlYWtfYmRnfSB8IHNvcnQgfCB1bmlxIC1kID4+ICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm5hcnJvdy5kdXBsaWNhdGUudHh0IiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgIiMiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiY3V0IC1mMSwzIHtvdXRwdXQubmFycm93UGVha19iZGd9IHwgc29ydCB8IHVuaXEgLWQgfCBzZWQgJ3MvXHQvXHQuKlx0LycgPj4gJE9VVF9QQVRILyR7e3NhbXBsZV9OYW1lfX0ubmFycm93LmR1cGxpY2F0ZS50eHQiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiIyIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIiVzXG4iICJpZiBbIC1zICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm5hcnJvdy5kdXBsaWNhdGUudHh0IF07IHRoZW4iIHwgdGVlID4oY2F0ID4mMikKCQkJbGluZT0iXCRsaW5lIgoJCQlwcmludGYgIlx0JXNcbiIgIndoaWxlIElGUz0gcmVhZCBsaW5lOyBkbyBncmVwIC1uciAtbSAxIC0tcGVybC1yZWdleCAnJGxpbmUnIHtvdXRwdXQubmFycm93UGVha19iZGd9IHwgY3V0IC1kJzonIC1mMSA+PiAkT1VUX1BBVEgvJHt7c2FtcGxlX05hbWV9fS5uYXJyb3cuZHVwbGljYXRlX2xpbmUudHh0OyBkb25lPCAkT1VUX1BBVEgvJHt7c2FtcGxlX05hbWV9fS5uYXJyb3cuZHVwbGljYXRlLnR4dCIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIlx0JXNcbiIgIndoaWxlIElGUz0gcmVhZCBsaW5lOyBkbyBzZWQgJyR7e2xpbmV9fWQnIHtvdXRwdXQubmFycm93UGVha19iZGd9ID4ge291dHB1dC5uYXJyb3dQZWFrX2JkZ30udG1wOyBkb25lPCAkT1VUX1BBVEgvJHt7c2FtcGxlX05hbWV9fS5uYXJyb3cuZHVwbGljYXRlX2xpbmUudHh0IiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgImZpIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgIiMiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiTENfQ09MTEFURT1DIHNvcnQgLWsxLDEgLWsyLDJuIHtvdXRwdXQubmFycm93UGVha19iZGd9LnRtcCA+IHtvdXRwdXQubmFycm93UGVha19iZGd9IiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgImJlZEdyYXBoVG9CaWdXaWcge291dHB1dC5uYXJyb3dQZWFrX2JkZ30ge2NvbmZpZ19yZWZlcmVuY2VfRGljdFtDSFJPTV9TSVpFXX0ge291dHB1dC5uYXJyb3dQZWFrX2JpZ3dpZ30iIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiIyIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIiVzXG4iICJpZiBbIC1mIHtvdXRwdXQubmFycm93UGVha19iaWd3aWd9IF07IHRoZW4iIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICJcdCVzXG4iICJybSAtcmYgJE9VVF9QQVRILyR7e3NhbXBsZV9OYW1lfX0ubWFjczJfbmFycm93X3BlYWtzLm5hcnJvd1BlYWsiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICJcdCVzXG4iICJybSAtcmYgJE9VVF9QQVRILyR7e3NhbXBsZV9OYW1lfX0ubWFjczJfbmFycm93X3N1bW1pdHMuYmVkIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiXHQlc1xuIiAicm0gLXJmICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvd190cmVhdF9waWxldXAuYmRnIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiXHQlc1xuIiAicm0gLXJmICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvd19jb250cm9sX2xhbWJkYS5iZGciIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICJcdCVzXG4iICJybSAtcmYgJE9VVF9QQVRILyR7e3NhbXBsZV9OYW1lfX0ubWFjczJfbmFycm93X0ZFLmJkZyIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIlx0JXNcbiIgInJtIC1yZiB7b3V0cHV0Lm5hcnJvd1BlYWtfYmVkfS50bXAiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICJcdCVzXG4iICJybSAtcmYge291dHB1dC5uYXJyb3dQZWFrX2JlZH0uc29ydGVkIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiXHQlc1xuIiAicm0gLXJmICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm5hcnJvd1BlYWsuYmRnLnRtcCIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIlx0JXNcbiIgInJtIC1yZiAkT1VUX1BBVEgvJHt7c2FtcGxlX05hbWV9fS5uYXJyb3cuZHVwbGljYXRlLnR4dCIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIlx0JXNcbiIgInJtIC1yZiAkT1VUX1BBVEgvJHt7c2FtcGxlX05hbWV9fS5uYXJyb3cuZHVwbGljYXRlX2xpbmUudHh0IiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgImZpIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXByaW50ZiAiJXNcbiIgIiMiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiRVhFQ1VUSU5HLi4uLiIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIiVzXG4iICIjIiB8IHRlZSA+KGNhdCA+JjIpCgkJCXN0YXJ0X3RpbWU9IiQoZGF0ZSAtdSArJXMpIgoJCQkjCgkJCSMjCgkJCXNhbXBsZV9OYW1lPSQoYmFzZW5hbWUge2lucHV0LnByb2Nlc3NlZF9iZWR9KQoJCQlzYW1wbGVfTmFtZT0ke3tzYW1wbGVfTmFtZSUucHJvY2Vzc2VkLmJlZC5nen19CgkJCSMKCQkJbWFjczIgY2FsbHBlYWsgLS10cmVhdG1lbnQge2lucHV0LnByb2Nlc3NlZF9iZWR9IC0tbmFtZSAke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvdyB7TUFDUzJfTkFSUk9XX1BBUkFNRVRFUlN9IC0tb3V0ZGlyICRPVVRfUEFUSAoJCQlMQ19DT0xMQVRFPUMgc29ydCAtazEsMSAtazIsMm4gJE9VVF9QQVRILyR7e3NhbXBsZV9OYW1lfX0ubWFjczJfbmFycm93X3BlYWtzLm5hcnJvd1BlYWsgPiB7b3V0cHV0Lm5hcnJvd1BlYWtfYmVkfS5zb3J0ZWQKCQkJYmd6aXAgLWMge291dHB1dC5uYXJyb3dQZWFrX2JlZH0uc29ydGVkID4ge291dHB1dC5uYXJyb3dQZWFrX2JlZH0KCQkJdGFiaXggLWYgLXAgYmVkIHtvdXRwdXQubmFycm93UGVha19iZWR9CgkJCWF3ayAnQkVHSU57e09GUz1GU319IHt7aWYgKCQ1PjEwMDApICQ1PTEwMDA7IHByaW50ICQwfX0nIHtvdXRwdXQubmFycm93UGVha19iZWR9LnNvcnRlZCA+IHtvdXRwdXQubmFycm93UGVha19iZWR9LnRtcAoJCQliZWRUb0JpZ0JlZCAtYXM9Li9TY3JpcHQvYmlnTmFycm93UGVhay5hcyAtdHlwZT1iZWQ2KzQge291dHB1dC5uYXJyb3dQZWFrX2JlZH0udG1wIHtjb25maWdfcmVmZXJlbmNlX0RpY3RbQ0hST01fU0laRV19IHtvdXRwdXQubmFycm93UGVha19iaWdiZWR9CgkJCSMKCQkJbWFjczIgYmRnY21wIC10ICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvd190cmVhdF9waWxldXAuYmRnIC1jICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvd19jb250cm9sX2xhbWJkYS5iZGcgLS1vLXByZWZpeCAke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvdyAtLW91dGRpciAkT1VUX1BBVEggLS1tZXRob2QgRkUgLS1wc2V1ZG9jb3VudCAwLjAwMDAxCgkJCXNsb3BCZWQgLWkgJE9VVF9QQVRILyR7e3NhbXBsZV9OYW1lfX0ubWFjczJfbmFycm93X0ZFLmJkZyAtZyB7Y29uZmlnX3JlZmVyZW5jZV9EaWN0W0NIUk9NX1NJWkVdfSAtYiAwIHwgYmVkQ2xpcCBzdGRpbiB7Y29uZmlnX3JlZmVyZW5jZV9EaWN0W0NIUk9NX1NJWkVdfSB7b3V0cHV0Lm5hcnJvd1BlYWtfYmRnfS50bXAKCQkJTENfQ09MTEFURT1DIHNvcnQgLWsxLDEgLWsyLDJuIHtvdXRwdXQubmFycm93UGVha19iZGd9LnRtcCA+IHtvdXRwdXQubmFycm93UGVha19iZGd9CgkJCSMKCQkJTENfQ09MTEFURT1DIHNvcnQgLXUgLWsxLDEgLWsyLDJuIC1rMywzbiAtcyB7b3V0cHV0Lm5hcnJvd1BlYWtfYmRnfSA+IHtvdXRwdXQubmFycm93UGVha19iZGd9LnVuaXEKCQkJY3V0IC1mMSwyLDMge291dHB1dC5uYXJyb3dQZWFrX2JkZ30udW5pcSB8IHNvcnQgfCB1bmlxIC1kID4gJE9VVF9QQVRILyR7e3NhbXBsZV9OYW1lfX0ubmFycm93LmR1cGxpY2F0ZS50eHQKCQkJY3V0IC1mMSwyIHtvdXRwdXQubmFycm93UGVha19iZGd9LnVuaXEgfCBzb3J0IHwgdW5pcSAtZCA+PiAkT1VUX1BBVEgvJHt7c2FtcGxlX05hbWV9fS5uYXJyb3cuZHVwbGljYXRlLnR4dAoJCQljdXQgLWYxLDMge291dHB1dC5uYXJyb3dQZWFrX2JkZ30udW5pcSB8IHNvcnQgfCB1bmlxIC1kIHwgc2VkICdzL1x0L1x0LipcdC8nID4+ICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm5hcnJvdy5kdXBsaWNhdGUudHh0CgkJCSMKCQkJaWYgWyAtcyAkT1VUX1BBVEgvJHt7c2FtcGxlX05hbWV9fS5uYXJyb3cuZHVwbGljYXRlLnR4dCBdOyB0aGVuCgkJCQljYXQgJE9VVF9QQVRILyR7e3NhbXBsZV9OYW1lfX0ubmFycm93LmR1cGxpY2F0ZS50eHQgfCB3aGlsZSByZWFkIGxpbmU7IGRvIGdyZXAgLW5yIC1tIDEgLS1wZXJsLXJlZ2V4ICIkbGluZSIge291dHB1dC5uYXJyb3dQZWFrX2JkZ30udW5pcSB8IGN1dCAtZCI6IiAtZjEgPj4gJE9VVF9QQVRILyR7e3NhbXBsZV9OYW1lfX0ubmFycm93LmR1cGxpY2F0ZV9saW5lLnR4dDsgZG9uZQoJCQkJY2F0ICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm5hcnJvdy5kdXBsaWNhdGVfbGluZS50eHQgfCB3aGlsZSByZWFkIGxpbmU7IGRvIHNlZCAiJHt7bGluZX19ZCIge291dHB1dC5uYXJyb3dQZWFrX2JkZ30udW5pcSA+IHtvdXRwdXQubmFycm93UGVha19iZGd9LnVuaXEuZml4OyBkb25lCgkJCQlMQ19DT0xMQVRFPUMgc29ydCAtazEsMSAtazIsMm4ge291dHB1dC5uYXJyb3dQZWFrX2JkZ30udW5pcS5maXggPiB7b3V0cHV0Lm5hcnJvd1BlYWtfYmRnfS51bmlxLmZpeC5zb3J0ZWQKCQkJCWJlZEdyYXBoVG9CaWdXaWcge291dHB1dC5uYXJyb3dQZWFrX2JkZ30udW5pcS5maXguc29ydGVkIHtjb25maWdfcmVmZXJlbmNlX0RpY3RbQ0hST01fU0laRV19IHtvdXRwdXQubmFycm93UGVha19iaWd3aWd9CgkJCWVsc2UKCQkJCWJlZEdyYXBoVG9CaWdXaWcge291dHB1dC5uYXJyb3dQZWFrX2JkZ30udW5pcSB7Y29uZmlnX3JlZmVyZW5jZV9EaWN0W0NIUk9NX1NJWkVdfSB7b3V0cHV0Lm5hcnJvd1BlYWtfYmlnd2lnfQoJCQlmaQoJCQkKCQkJIwoJCQlpZiBbIC1mIHtvdXRwdXQubmFycm93UGVha19iaWd3aWd9IF07IHRoZW4KCQkJCXJtIC1yZiAkT1VUX1BBVEgvJHt7c2FtcGxlX05hbWV9fS5tYWNzMl9uYXJyb3dfcGVha3MubmFycm93UGVhawoJCQkJcm0gLXJmICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvd19zdW1taXRzLmJlZAoJCQkJcm0gLXJmICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvd190cmVhdF9waWxldXAuYmRnCgkJCQlybSAtcmYgJE9VVF9QQVRILyR7e3NhbXBsZV9OYW1lfX0ubWFjczJfbmFycm93X2NvbnRyb2xfbGFtYmRhLmJkZwoJCQkJcm0gLXJmICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm1hY3MyX25hcnJvd19GRS5iZGcKCQkJCXJtIC1yZiB7b3V0cHV0Lm5hcnJvd1BlYWtfYmVkfS50bXAKCQkJCXJtIC1yZiB7b3V0cHV0Lm5hcnJvd1BlYWtfYmVkfS5zb3J0ZWQKCQkJCXJtIC1yZiB7b3V0cHV0Lm5hcnJvd1BlYWtfYmRnfS50bXAKCQkJCXJtIC1yZiB7b3V0cHV0Lm5hcnJvd1BlYWtfYmRnfS51bmlxCgkJCQlybSAtcmYge291dHB1dC5uYXJyb3dQZWFrX2JkZ30udW5pcS5maXgKCQkJCXJtIC1yZiB7b3V0cHV0Lm5hcnJvd1BlYWtfYmRnfS51bmlxLmZpeC5zb3J0ZWQKCQkJCXJtIC1yZiAkT1VUX1BBVEgvJHt7c2FtcGxlX05hbWV9fS5uYXJyb3cuZHVwbGljYXRlLnR4dAoJCQkJcm0gLXJmICRPVVRfUEFUSC8ke3tzYW1wbGVfTmFtZX19Lm5hcnJvdy5kdXBsaWNhdGVfbGluZS50eHQKCQkJZmkKCQkJIyMKCQkJIwoJCQllbmRfdGltZT0iJChkYXRlIC11ICslcykiCgkJCXByaW50ZiAiJXNcbiIgIiMiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiRE9ORSEhISEiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiIyIgfCB0ZWUgPihjYXQgPiYyKQoJCQlwcmludGYgIkVMQVBTRUQgVElNRTogJXMgc2Vjb25kc1xuIiAiJCgoJGVuZF90aW1lLSRzdGFydF90aW1lKSkiIHwgdGVlID4oY2F0ID4mMikKCQkJcHJpbnRmICIlc1xuIiAiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIiB8IHRlZSA+KGNhdCA+JjIpCgkJcRVlWAUAAABzaGVsbHEWhXEXdHEYLg==", "rule": "Peak_Calling_Narrow", "input": ["/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/post_alignment/ctl1.processed.bam", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/post_alignment/ctl1.processed.bam.bai", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/post_alignment/ctl1.processed.bed.gz", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/post_alignment/ctl1.processed.bed.gz.tbi"], "log": [], "params": [], "shellcmd": null, "incomplete": false, "starttime": 1559578061.194937, "endtime": 1559578067.1600254, "job_hash": 6611983042051484108, "conda_env": null, "singularity_img_url": null}