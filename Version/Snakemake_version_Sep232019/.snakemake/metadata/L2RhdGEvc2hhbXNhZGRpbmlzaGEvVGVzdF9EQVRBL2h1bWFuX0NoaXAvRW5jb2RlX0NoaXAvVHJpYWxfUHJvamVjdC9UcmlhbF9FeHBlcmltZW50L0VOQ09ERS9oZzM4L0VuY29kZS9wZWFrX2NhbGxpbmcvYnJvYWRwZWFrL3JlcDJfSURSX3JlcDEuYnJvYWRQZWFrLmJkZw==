{"version": null, "code": "", "rule": "BroadPeak_IDR", "input": ["/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/peak_calling/broadpeak/rep1.broadPeak.gz", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/peak_calling/broadpeak/rep2.broadPeak.gz", "/data/shamsaddinisha/Test_DATA/human_Chip/Encode_Chip/Trial_Project/Trial_Experiment/ENCODE/hg38/Encode/peak_calling/broadpeak/rep2_POOLED_rep1.broadPeak.gz"], "log": [], "params": [], "shellcmd": null, "incomplete": false, "starttime": 1559578508.480294, "endtime": 1559578518.7054026, "job_hash": 5857850533448649825, "conda_env": null, "singularity_img_url": null}